# # name: Create new pull request

# on:
#   workflow_dispatch:
#   issues:
#     types: [opened, edited]
#   issue_comment:
#     types: [created, edited]

# jobs:
#   check:
#     runs-on: ubuntu-latest
#     outputs:
#       phraseExists: ${{ steps.check-body.outputs.result }}
#       commentId: ${{ steps.check-body.outputs.commentId }}
#     steps:
#       - name: Check if issue body or any comment contains 'Hey ontobot'
#         id: check-body
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const issue = await github.rest.issues.get({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               issue_number: context.issue.number
#             });

#             let bodyText = issue.data.body ? issue.data.body.toLowerCase() : '';
#             let commentId = null;

#             // Fetch all comments for the issue
#             const comments = await github.rest.issues.listComments({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               issue_number: context.issue.number
#             });

#             // Check each comment for the phrase
#             for (const comment of comments.data) {
#               if (comment.body.toLowerCase().includes('hey ontobot')) {
#                 bodyText += ' ' + comment.body.toLowerCase();
#                 commentId = comment.id;
#               }
#             }

#             return {
#               result: bodyText.includes('hey ontobot'),
#               commentId: commentId
#             };

#   build:
#     needs: check
#     if: needs.check.outputs.phraseExists == 'true'
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         python-version: ["3.9"]
#         os: [ubuntu-latest]

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v3
#         with:
#           python-version: ${{ matrix.python-version }}

#       - name: Return issue number
#         id: gh-script-issue
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const issue_number = context.issue.number;
#             return issue_number;

#       - name: Return repository name
#         id: gh-script-repo
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const repo = context.repo.owner + "/" + context.repo.repo;
#             return repo;

#       - name: Set branch name
#         id: vars
#         run: |
#           echo "resource=src/ontology/mondo-edit.obo" >> $GITHUB_ENV
#           echo "branch-name=ochange_automation_${{ steps.gh-script-issue.outputs.result }}" >> $GITHUB_ENV

#       - name: Install dependencies
#         run: |
#           pip install ontobot-change-agent

#       - name: Run ochange
#         id: ochange
#         run: |
#           ochange process-issue ${{ env.resource }} \
#           -r ${{ steps.gh-script-repo.outputs.result }} \
#           -n ${{ steps.gh-script-issue.outputs.result }} \
#           -g ${{ secrets.GH_TOKEN }} \
#           -p PREFIX_OF_RESOURCE \
#           -c ${{ needs.check.outputs.commentId }}

#       - name: Create Pull Request
#         uses: peter-evans/create-pull-request@v4
#         if: ${{ env.PR_TITLE }}
#         with:
#           branch-suffix: short-commit-hash
#           labels: Automated
#           body: ${{ env.PR_BODY }}
#           title: ${{ env.PR_TITLE }}
#           base: ${{ github.head_ref }}
#           branch: ${{ env.branch-name }}
